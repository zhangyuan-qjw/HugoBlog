<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>zhang远</title>
    <link>/</link>
    <description>Recent content on zhang远</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 29 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Passing value between vue components</title>
      <link>/posts/vuepassvalue/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/vuepassvalue/</guid>
      <description>Parent component modifies the value of child component The properties in the props object are read-only properties and cannot be modifies within the component
Child component const props = defineProps({ newRole: { default: &amp;#39;邱&amp;#39;, type: String, }, }) Parent component x &amp;lt;chatSearch newRole=&amp;#39;&amp;#39;&amp;gt;&amp;lt;/chatSearch&amp;gt; Child component modifies the value of Parent component The properties in the props object are read-only properties and cannot be modifies within the component
//此处是父组件中引入的子组件 &amp;lt;ChildrenView v-model:num=&amp;#34;num&amp;#34;/&amp;gt; //定义数据 let num=ref(10);//定义num为10,传递给子组 &amp;lt;script setup&amp;gt; //子组件接收父组件传递过来的数据 const props=defineProps({ num:number; }); console.</description>
    </item>
    
    <item>
      <title>Use Django for pagination</title>
      <link>/posts/djangopagination/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/djangopagination/</guid>
      <description>Create Pageinator class FantasyPagination(PageNumberPagination): page_size = 5 page_size_query_param = &amp;#39;page_size&amp;#39; page_query_param = &amp;#39;page&amp;#39; max_page_size = 10 Use records = FantasyRecord.objects.all().order_by(&amp;#34;-data&amp;#34;) paginator = FantasyPagination() page = paginator.paginate_queryset(records, request) serializer = FantasyRecordSerializer(page, many=True) </description>
    </item>
    
    <item>
      <title>Git Base</title>
      <link>/posts/gitbase/</link>
      <pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/gitbase/</guid>
      <description>Basic commant of git View currently owned baranches git branch
Basic project process git init
git add .
git commit -m &amp;ldquo;First commit&amp;quot;git
git remote add origin git push -u origin master
Update project process git status
git add .
git commit - &amp;ldquo;Description&amp;rdquo;
git push (Default current branch)
when the romote project changes but the local project does not git pull origin master (Pull the latest changed remote branch)</description>
    </item>
    
    <item>
      <title>Site Deploy</title>
      <link>/posts/sitedisploy/</link>
      <pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/sitedisploy/</guid>
      <description>个人网站部署 ​	非常好，接下来我们开始部署前端项目。首先我的服务器已经准备好了（contos系统），并且服务器上下载并运行了docker，其次本地vue项目已经开发好了，并打包成了dist文件夹。在此基础上，下一步该如何操作？
​	在你的 CentOS 服务器上已经准备好 Docker 并且本地 Vue 项目已经打包成 dist 文件夹的情况下，下一步是将前端 Vue 项目部署到服务器上的 Docker 容器中。以下是一些步骤来完成这个任务：
将本地的 Vue.js 项目上传到服务器：你可以使用 SCP 或 SFTP 等工具将本地的 dist 文件夹上传到服务器。假设你将 dist 文件夹上传到服务器的某个目录，比如 /path/to/your/dist.
创建一个 Dockerfile：在服务器上创建一个 Dockerfile，用于构建一个运行 Vue.js 项目的 Docker 容器。以下是一个示例 Dockerfile：
# 使用官方的 Node.js 镜像 FROM node:14 # 设置工作目录 WORKDIR /app # 复制本地的 dist 文件夹到容器中 COPY /path/to/your/dist /app # 安装一个简单的 HTTP 服务器，用于提供静态文件 RUN npm install -g http-server # 暴露容器的端口 EXPOSE 8080 # 启动 HTTP 服务器 CMD [&amp;#34;http-server&amp;#34;, &amp;#34;-p&amp;#34;, &amp;#34;8080&amp;#34;] 这个 Dockerfile 使用 Node.</description>
    </item>
    
    <item>
      <title>Deep learning: exploring the future of artificial intelligence</title>
      <link>/posts/englishdeep/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/englishdeep/</guid>
      <description>In today&amp;rsquo;s digital age,artificial intelligence gas become a hot topic in technology . Deep learning, a branch of artificial intelligence,is changing the way we see the world and process information. It mimics the neural network structure of the human brain and enables computer system to learn and improve their performance through large amounts of data and complex algorithms. The advent of deep learning has enabled computer to perform more intelligent task,such as speech recognition, image recognition, and natural language processing.</description>
    </item>
    
    <item>
      <title>java Base</title>
      <link>/posts/javabase/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/javabase/</guid>
      <description>Java修饰符
Java关键字和标志符（只写几个未知的）
继承
接口
数据类型（区别大小值）
1.引用数据类型 String字符串类型。 2.基本数据类型 byte类型最小的整型。 char类型只能定义单个字符。 自动类型转换（小自动变大）
强制类型转换（大强行变小）
运算符（只记不太一样的）
1.逻辑运算符是对布尔型变量进行运算，其结果也是布尔型，具体如表 1 所示。
运算符 用法 含义 说明 实例 结果 &amp;amp;&amp;amp; a&amp;amp;&amp;amp;b 短路与 ab 全为 true 时，计算结果为 true，否则为 false。 2&amp;gt;1&amp;amp;&amp;amp;3&amp;lt;4 true || a||b 短路或 ab 全为 false 时，计算结果为 false，否则为 true。 2&amp;lt;1||3&amp;gt;4 false ! !a 逻辑非 a 为 true 时，值为 false，a 为 false 时，值为 true !(2&amp;gt;4) true | a|b 逻辑或 ab 全为 false 时，计算结果为 false，否则为 true 1&amp;gt;2|3&amp;gt;5 false &amp;amp; a&amp;amp;b 逻辑与 ab 全为 true 时，计算结果为 true，否则为 false 1&amp;lt;2&amp;amp;3&amp;lt;5 true &amp;amp;&amp;amp; 与 &amp;amp; 区别：如果 a 为 false，则不计算 b（因为不论 b 为何值，结果都为 false） || 与 | 区别：如果 a 为 true，则不计算 b（因为不论 b 为何值，结果都为 true） 2.</description>
    </item>
    
    <item>
      <title>Reptile Learning</title>
      <link>/posts/reptilebase/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/reptilebase/</guid>
      <description>urllib库（request更方便，在于不用再去构建一个get或者post请求）
urllib库包含以下几个模块（模块里面是函数）： urllib.request - 打开和读取 URL。 urllib.error - 包含 urllib.request 抛出的异常。 urllib.parse - 解析 URL。 # urllib.robotparser - 解析 robots.txt 文件。 拓: getcode() 函数获取&amp;#39;网页状态码&amp;#39;，返回 200 说明网页正常，返回 404 说明网页不存在 get_text()获取除标签以外的&amp;#39;文本内容&amp;#39;。 .attrs获取&amp;#39;标签对象的属性&amp;#39;，返回一个字典。 body = &amp;#39;\n&amp;#39;.join([line.text for line in lines]) # 有意思的一种换行循环加入列表。 title = bs.find(&amp;#39;h1&amp;#39;).text # text什么意思,去除标签获取文本。 用类来设置属性。 zip()函数：for i n in zip(is,ns):[&amp;#39;用以设置一个双循环&amp;#39;] str.strip([chars]); 参数chars -- 移除字符串&amp;#39;头尾&amp;#39;指定的字符序列。 1.&amp;#39;urllib.request模块&amp;#39; urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None) url：url 地址。 data：发送到服务器的其他数据对象，默认为 None。 timeout：设置访问超时时间。 cafile 和 capath：cafile 为 CA 证书， capath 为 CA 证书的路径，使用 HTTPS 需要用到。 cadefault：已经被弃用。 context：ssl.</description>
    </item>
    
    <item>
      <title>Use Django to store images sent from the front end</title>
      <link>/posts/imagesent/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/imagesent/</guid>
      <description>使用django如何储存前端传来的图片？ 在Django中，您可以使用以下步骤将前端传来的图片储存起来：
在您的Django项目中创建一个模型来储存图片，例如： arduinoCopy codefrom django.db import modelsclass Image(models.Model):name = models.CharField(max_length=255)image_file = models.ImageField(upload_to=&amp;#39;images/&amp;#39;) 这个模型有一个名称字段和一个ImageField字段，后者是Django特有的字段，用于储存图片。
在您的视图中，您需要将上传的图片从请求中提取出来，并创建一个Image实例来储存它。以下是一个基本的示例视图： arduinoCopy codefrom django.shortcuts import renderfrom .models import Imagedef upload_image(request):if request.method == &amp;#39;POST&amp;#39;:image_file = request.FILES[&amp;#39;image_file&amp;#39;]name = request.POST[&amp;#39;name&amp;#39;]image = Image.objects.create(name=name, image_file=image_file)return render(request, &amp;#39;upload_success.html&amp;#39;, {&amp;#39;image&amp;#39;: image})return render(request, &amp;#39;upload_form.html&amp;#39;) 这个视图假设您有一个名为&amp;quot;upload_form.html&amp;quot;的模板来渲染上传表单，以及一个名为&amp;quot;upload_success.html&amp;quot;的模板来渲染成功上传的页面。
最后，在您的模板中，您需要确保您的表单使用&amp;quot;enctype=&amp;lsquo;multipart/form-data&amp;rsquo;&amp;ldquo;来支持文件上传。以下是一个基本的示例模板： phpCopy code&amp;lt;form action=&amp;#34;{% url &amp;#39;upload_image&amp;#39; %}&amp;#34; method=&amp;#34;post&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;{% csrf_token %}&amp;lt;label for=&amp;#34;name&amp;#34;&amp;gt;Name:&amp;lt;/label&amp;gt;&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; id=&amp;#34;name&amp;#34;&amp;gt;&amp;lt;label for=&amp;#34;image_file&amp;#34;&amp;gt;Image:&amp;lt;/label&amp;gt;&amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34; id=&amp;#34;image_file&amp;#34;&amp;gt;&amp;lt;button type=&amp;#34;submit&amp;#34;&amp;gt;Upload&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt; 这个模板包括一个文本输入框和一个文件输入框，以及一个提交按钮。注意&amp;quot;enctype=&amp;lsquo;multipart/form-data&amp;rsquo;&amp;ldquo;这个属性是必须的来支持文件上传。</description>
    </item>
    
    
  </channel>
</rss>
