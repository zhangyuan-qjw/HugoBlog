<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ts on zhang远</title>
    <link>/tags/ts/</link>
    <description>Recent content in ts on zhang远</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 29 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/ts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Passing value between vue components</title>
      <link>/posts/vuepassvalue/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/vuepassvalue/</guid>
      <description>Parent component modifies the value of child component The properties in the props object are read-only properties and cannot be modifies within the component
Child component const props = defineProps({ newRole: { default: &amp;#39;邱&amp;#39;, type: String, }, }) Parent component x &amp;lt;chatSearch newRole=&amp;#39;&amp;#39;&amp;gt;&amp;lt;/chatSearch&amp;gt; Child component modifies the value of Parent component The properties in the props object are read-only properties and cannot be modifies within the component
//此处是父组件中引入的子组件 &amp;lt;ChildrenView v-model:num=&amp;#34;num&amp;#34;/&amp;gt; //定义数据 let num=ref(10);//定义num为10,传递给子组 &amp;lt;script setup&amp;gt; //子组件接收父组件传递过来的数据 const props=defineProps({ num:number; }); console.</description>
    </item>
    
    <item>
      <title>Use Django to store images sent from the front end</title>
      <link>/posts/imagesent/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/imagesent/</guid>
      <description>使用django如何储存前端传来的图片？ 在Django中，您可以使用以下步骤将前端传来的图片储存起来：
在您的Django项目中创建一个模型来储存图片，例如： arduinoCopy codefrom django.db import modelsclass Image(models.Model):name = models.CharField(max_length=255)image_file = models.ImageField(upload_to=&amp;#39;images/&amp;#39;) 这个模型有一个名称字段和一个ImageField字段，后者是Django特有的字段，用于储存图片。
在您的视图中，您需要将上传的图片从请求中提取出来，并创建一个Image实例来储存它。以下是一个基本的示例视图： arduinoCopy codefrom django.shortcuts import renderfrom .models import Imagedef upload_image(request):if request.method == &amp;#39;POST&amp;#39;:image_file = request.FILES[&amp;#39;image_file&amp;#39;]name = request.POST[&amp;#39;name&amp;#39;]image = Image.objects.create(name=name, image_file=image_file)return render(request, &amp;#39;upload_success.html&amp;#39;, {&amp;#39;image&amp;#39;: image})return render(request, &amp;#39;upload_form.html&amp;#39;) 这个视图假设您有一个名为&amp;quot;upload_form.html&amp;quot;的模板来渲染上传表单，以及一个名为&amp;quot;upload_success.html&amp;quot;的模板来渲染成功上传的页面。
最后，在您的模板中，您需要确保您的表单使用&amp;quot;enctype=&amp;lsquo;multipart/form-data&amp;rsquo;&amp;ldquo;来支持文件上传。以下是一个基本的示例模板： phpCopy code&amp;lt;form action=&amp;#34;{% url &amp;#39;upload_image&amp;#39; %}&amp;#34; method=&amp;#34;post&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;{% csrf_token %}&amp;lt;label for=&amp;#34;name&amp;#34;&amp;gt;Name:&amp;lt;/label&amp;gt;&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; id=&amp;#34;name&amp;#34;&amp;gt;&amp;lt;label for=&amp;#34;image_file&amp;#34;&amp;gt;Image:&amp;lt;/label&amp;gt;&amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34; id=&amp;#34;image_file&amp;#34;&amp;gt;&amp;lt;button type=&amp;#34;submit&amp;#34;&amp;gt;Upload&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt; 这个模板包括一个文本输入框和一个文件输入框，以及一个提交按钮。注意&amp;quot;enctype=&amp;lsquo;multipart/form-data&amp;rsquo;&amp;ldquo;这个属性是必须的来支持文件上传。</description>
    </item>
    
  </channel>
</rss>
